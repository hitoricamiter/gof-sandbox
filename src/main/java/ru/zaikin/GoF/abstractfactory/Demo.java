package ru.zaikin.GoF.abstractfactory;

public class Demo {
    public static void main(String[] args) {
        GUIFactory factory = new WebFactory(); // можно заменить на MobileFactory
        Button button = factory.createButton();
        TextField textField = factory.createTextField();

        button.render();
        textField.render();
    }
}

/*
Создавать семейства взаимосвязанных объектов, не привязываясь к конкретным классам.

То есть ты не знаешь заранее, какая конкретная реализация нужна, но хочешь быть уверенным,
что все объекты из одного семейства будут совместимы между собой.

Пример из жизни твоего проекта

Представь, что у нас есть:

Обычные клиенты: уведомления через Email + простой шаблон.

VIP клиенты: уведомления через SMS + спец-шаблон.

Если делать без Abstract Factory, код выглядел бы как огромный switch/case по типу клиента и каналу,
и каждый раз, когда добавляется новый тип клиента — ломается логика.

С Abstract Factory:

Для каждого типа клиента создаём свою фабрику, которая умеет возвращать готовое семейство объектов (sender + шаблон).

Клиентский код просто использует фабрику — всё работает согласованно.*/
